// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package seed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SeedClient is the client API for Seed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeedClient interface {
	Seed(ctx context.Context, opts ...grpc.CallOption) (Seed_SeedClient, error)
}

type seedClient struct {
	cc grpc.ClientConnInterface
}

func NewSeedClient(cc grpc.ClientConnInterface) SeedClient {
	return &seedClient{cc}
}

func (c *seedClient) Seed(ctx context.Context, opts ...grpc.CallOption) (Seed_SeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Seed_serviceDesc.Streams[0], "/Seed/Seed", opts...)
	if err != nil {
		return nil, err
	}
	x := &seedSeedClient{stream}
	return x, nil
}

type Seed_SeedClient interface {
	Send(*SeedRequest) error
	Recv() (*SeedResponse, error)
	grpc.ClientStream
}

type seedSeedClient struct {
	grpc.ClientStream
}

func (x *seedSeedClient) Send(m *SeedRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *seedSeedClient) Recv() (*SeedResponse, error) {
	m := new(SeedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SeedServer is the server API for Seed service.
// All implementations must embed UnimplementedSeedServer
// for forward compatibility
type SeedServer interface {
	Seed(Seed_SeedServer) error
	mustEmbedUnimplementedSeedServer()
}

// UnimplementedSeedServer must be embedded to have forward compatible implementations.
type UnimplementedSeedServer struct {
}

func (UnimplementedSeedServer) Seed(Seed_SeedServer) error {
	return status.Errorf(codes.Unimplemented, "method Seed not implemented")
}
func (UnimplementedSeedServer) mustEmbedUnimplementedSeedServer() {}

// UnsafeSeedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeedServer will
// result in compilation errors.
type UnsafeSeedServer interface {
	mustEmbedUnimplementedSeedServer()
}

func RegisterSeedServer(s *grpc.Server, srv SeedServer) {
	s.RegisterService(&_Seed_serviceDesc, srv)
}

func _Seed_Seed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SeedServer).Seed(&seedSeedServer{stream})
}

type Seed_SeedServer interface {
	Send(*SeedResponse) error
	Recv() (*SeedRequest, error)
	grpc.ServerStream
}

type seedSeedServer struct {
	grpc.ServerStream
}

func (x *seedSeedServer) Send(m *SeedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *seedSeedServer) Recv() (*SeedRequest, error) {
	m := new(SeedRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Seed_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Seed",
	HandlerType: (*SeedServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Seed",
			Handler:       _Seed_Seed_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/seed/seed.proto",
}
