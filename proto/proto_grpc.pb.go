// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TrackerClient is the client API for Tracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackerClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type trackerClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackerClient(cc grpc.ClientConnInterface) TrackerClient {
	return &trackerClient{cc}
}

var trackerRegisterStreamDesc = &grpc.StreamDesc{
	StreamName: "Register",
}

func (c *trackerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/Tracker/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackerService is the service API for Tracker service.
// Fields should be assigned to their respective handler implementations only before
// RegisterTrackerService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type TrackerService struct {
	Register func(context.Context, *RegisterRequest) (*RegisterResponse, error)
}

func (s *TrackerService) register(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/Tracker/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterTrackerService registers a service implementation with a gRPC server.
func RegisterTrackerService(s grpc.ServiceRegistrar, srv *TrackerService) {
	srvCopy := *srv
	if srvCopy.Register == nil {
		srvCopy.Register = func(context.Context, *RegisterRequest) (*RegisterResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "Tracker",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Register",
				Handler:    srvCopy.register,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "proto/proto.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewTrackerService creates a new TrackerService containing the
// implemented methods of the Tracker service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewTrackerService(s interface{}) *TrackerService {
	ns := &TrackerService{}
	if h, ok := s.(interface {
		Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	}); ok {
		ns.Register = h.Register
	}
	return ns
}

// UnstableTrackerService is the service API for Tracker service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableTrackerService interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
}

// DaemonClient is the client API for Daemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DaemonClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type daemonClient struct {
	cc grpc.ClientConnInterface
}

func NewDaemonClient(cc grpc.ClientConnInterface) DaemonClient {
	return &daemonClient{cc}
}

var daemonAddStreamDesc = &grpc.StreamDesc{
	StreamName: "Add",
}

func (c *daemonClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/Daemon/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var daemonDeleteStreamDesc = &grpc.StreamDesc{
	StreamName: "Delete",
}

func (c *daemonClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/Daemon/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaemonService is the service API for Daemon service.
// Fields should be assigned to their respective handler implementations only before
// RegisterDaemonService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type DaemonService struct {
	Add    func(context.Context, *AddRequest) (*AddResponse, error)
	Delete func(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

func (s *DaemonService) add(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/Daemon/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *DaemonService) delete(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/Daemon/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterDaemonService registers a service implementation with a gRPC server.
func RegisterDaemonService(s grpc.ServiceRegistrar, srv *DaemonService) {
	srvCopy := *srv
	if srvCopy.Add == nil {
		srvCopy.Add = func(context.Context, *AddRequest) (*AddResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
		}
	}
	if srvCopy.Delete == nil {
		srvCopy.Delete = func(context.Context, *DeleteRequest) (*DeleteResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "Daemon",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Add",
				Handler:    srvCopy.add,
			},
			{
				MethodName: "Delete",
				Handler:    srvCopy.delete,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "proto/proto.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewDaemonService creates a new DaemonService containing the
// implemented methods of the Daemon service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewDaemonService(s interface{}) *DaemonService {
	ns := &DaemonService{}
	if h, ok := s.(interface {
		Add(context.Context, *AddRequest) (*AddResponse, error)
	}); ok {
		ns.Add = h.Add
	}
	if h, ok := s.(interface {
		Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	}); ok {
		ns.Delete = h.Delete
	}
	return ns
}

// UnstableDaemonService is the service API for Daemon service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableDaemonService interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

// SeedClient is the client API for Seed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeedClient interface {
	Seed(ctx context.Context, opts ...grpc.CallOption) (Seed_SeedClient, error)
}

type seedClient struct {
	cc grpc.ClientConnInterface
}

func NewSeedClient(cc grpc.ClientConnInterface) SeedClient {
	return &seedClient{cc}
}

var seedSeedStreamDesc = &grpc.StreamDesc{
	StreamName:    "Seed",
	ServerStreams: true,
	ClientStreams: true,
}

func (c *seedClient) Seed(ctx context.Context, opts ...grpc.CallOption) (Seed_SeedClient, error) {
	stream, err := c.cc.NewStream(ctx, seedSeedStreamDesc, "/Seed/Seed", opts...)
	if err != nil {
		return nil, err
	}
	x := &seedSeedClient{stream}
	return x, nil
}

type Seed_SeedClient interface {
	Send(*SeedRequest) error
	Recv() (*SeedResponse, error)
	grpc.ClientStream
}

type seedSeedClient struct {
	grpc.ClientStream
}

func (x *seedSeedClient) Send(m *SeedRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *seedSeedClient) Recv() (*SeedResponse, error) {
	m := new(SeedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SeedService is the service API for Seed service.
// Fields should be assigned to their respective handler implementations only before
// RegisterSeedService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type SeedService struct {
	Seed func(Seed_SeedServer) error
}

func (s *SeedService) seed(_ interface{}, stream grpc.ServerStream) error {
	return s.Seed(&seedSeedServer{stream})
}

type Seed_SeedServer interface {
	Send(*SeedResponse) error
	Recv() (*SeedRequest, error)
	grpc.ServerStream
}

type seedSeedServer struct {
	grpc.ServerStream
}

func (x *seedSeedServer) Send(m *SeedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *seedSeedServer) Recv() (*SeedRequest, error) {
	m := new(SeedRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegisterSeedService registers a service implementation with a gRPC server.
func RegisterSeedService(s grpc.ServiceRegistrar, srv *SeedService) {
	srvCopy := *srv
	if srvCopy.Seed == nil {
		srvCopy.Seed = func(Seed_SeedServer) error {
			return status.Errorf(codes.Unimplemented, "method Seed not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "Seed",
		Methods:     []grpc.MethodDesc{},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "Seed",
				Handler:       srvCopy.seed,
				ServerStreams: true,
				ClientStreams: true,
			},
		},
		Metadata: "proto/proto.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewSeedService creates a new SeedService containing the
// implemented methods of the Seed service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewSeedService(s interface{}) *SeedService {
	ns := &SeedService{}
	if h, ok := s.(interface{ Seed(Seed_SeedServer) error }); ok {
		ns.Seed = h.Seed
	}
	return ns
}

// UnstableSeedService is the service API for Seed service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableSeedService interface {
	Seed(Seed_SeedServer) error
}
