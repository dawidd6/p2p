// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ClientClient is the client API for Client service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
}

type clientClient struct {
	cc grpc.ClientConnInterface
}

func NewClientClient(cc grpc.ClientConnInterface) ClientClient {
	return &clientClient{cc}
}

var clientAddStreamDesc = &grpc.StreamDesc{
	StreamName: "Add",
}

func (c *clientClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/Client/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var clientDeleteStreamDesc = &grpc.StreamDesc{
	StreamName: "Delete",
}

func (c *clientClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/Client/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var clientListStreamDesc = &grpc.StreamDesc{
	StreamName: "List",
}

func (c *clientClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/Client/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var clientStartStreamDesc = &grpc.StreamDesc{
	StreamName: "Start",
}

func (c *clientClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/Client/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var clientStopStreamDesc = &grpc.StreamDesc{
	StreamName: "Stop",
}

func (c *clientClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/Client/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientService is the service API for Client service.
// Fields should be assigned to their respective handler implementations only before
// RegisterClientService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ClientService struct {
	Add    func(context.Context, *AddRequest) (*AddResponse, error)
	Delete func(context.Context, *DeleteRequest) (*DeleteResponse, error)
	List   func(context.Context, *ListRequest) (*ListResponse, error)
	Start  func(context.Context, *StartRequest) (*StartResponse, error)
	Stop   func(context.Context, *StopRequest) (*StopResponse, error)
}

func (s *ClientService) add(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/Client/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ClientService) delete(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/Client/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ClientService) list(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/Client/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ClientService) start(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/Client/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ClientService) stop(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/Client/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterClientService registers a service implementation with a gRPC server.
func RegisterClientService(s grpc.ServiceRegistrar, srv *ClientService) {
	srvCopy := *srv
	if srvCopy.Add == nil {
		srvCopy.Add = func(context.Context, *AddRequest) (*AddResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
		}
	}
	if srvCopy.Delete == nil {
		srvCopy.Delete = func(context.Context, *DeleteRequest) (*DeleteResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
		}
	}
	if srvCopy.List == nil {
		srvCopy.List = func(context.Context, *ListRequest) (*ListResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
		}
	}
	if srvCopy.Start == nil {
		srvCopy.Start = func(context.Context, *StartRequest) (*StartResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
		}
	}
	if srvCopy.Stop == nil {
		srvCopy.Stop = func(context.Context, *StopRequest) (*StopResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "Client",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Add",
				Handler:    srvCopy.add,
			},
			{
				MethodName: "Delete",
				Handler:    srvCopy.delete,
			},
			{
				MethodName: "List",
				Handler:    srvCopy.list,
			},
			{
				MethodName: "Start",
				Handler:    srvCopy.start,
			},
			{
				MethodName: "Stop",
				Handler:    srvCopy.stop,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "client/client.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewClientService creates a new ClientService containing the
// implemented methods of the Client service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewClientService(s interface{}) *ClientService {
	ns := &ClientService{}
	if h, ok := s.(interface {
		Add(context.Context, *AddRequest) (*AddResponse, error)
	}); ok {
		ns.Add = h.Add
	}
	if h, ok := s.(interface {
		Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	}); ok {
		ns.Delete = h.Delete
	}
	if h, ok := s.(interface {
		List(context.Context, *ListRequest) (*ListResponse, error)
	}); ok {
		ns.List = h.List
	}
	if h, ok := s.(interface {
		Start(context.Context, *StartRequest) (*StartResponse, error)
	}); ok {
		ns.Start = h.Start
	}
	if h, ok := s.(interface {
		Stop(context.Context, *StopRequest) (*StopResponse, error)
	}); ok {
		ns.Stop = h.Stop
	}
	return ns
}

// UnstableClientService is the service API for Client service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableClientService interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
}
