// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DaemonClient is the client API for Daemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DaemonClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type daemonClient struct {
	cc grpc.ClientConnInterface
}

func NewDaemonClient(cc grpc.ClientConnInterface) DaemonClient {
	return &daemonClient{cc}
}

var daemonAddStreamDesc = &grpc.StreamDesc{
	StreamName: "Add",
}

func (c *daemonClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/Daemon/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var daemonDeleteStreamDesc = &grpc.StreamDesc{
	StreamName: "Delete",
}

func (c *daemonClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/Daemon/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaemonService is the service API for Daemon service.
// Fields should be assigned to their respective handler implementations only before
// RegisterDaemonService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type DaemonService struct {
	Add    func(context.Context, *AddRequest) (*AddResponse, error)
	Delete func(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

func (s *DaemonService) add(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/Daemon/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *DaemonService) delete(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/Daemon/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterDaemonService registers a service implementation with a gRPC server.
func RegisterDaemonService(s grpc.ServiceRegistrar, srv *DaemonService) {
	srvCopy := *srv
	if srvCopy.Add == nil {
		srvCopy.Add = func(context.Context, *AddRequest) (*AddResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
		}
	}
	if srvCopy.Delete == nil {
		srvCopy.Delete = func(context.Context, *DeleteRequest) (*DeleteResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "Daemon",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Add",
				Handler:    srvCopy.add,
			},
			{
				MethodName: "Delete",
				Handler:    srvCopy.delete,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "daemon.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewDaemonService creates a new DaemonService containing the
// implemented methods of the Daemon service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewDaemonService(s interface{}) *DaemonService {
	ns := &DaemonService{}
	if h, ok := s.(interface {
		Add(context.Context, *AddRequest) (*AddResponse, error)
	}); ok {
		ns.Add = h.Add
	}
	if h, ok := s.(interface {
		Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	}); ok {
		ns.Delete = h.Delete
	}
	return ns
}

// UnstableDaemonService is the service API for Daemon service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableDaemonService interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}
